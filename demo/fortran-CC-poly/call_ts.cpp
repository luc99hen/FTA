/**
 * This file is generated by FTA 
 * Please DO NOT MODIFY IT !!! 
 **/

#include "call_ts.h"

#include <torch/script.h>
#include <iostream>
#include <memory>

int resnet_call(float *input)
{
    torch::jit::script::Module module;
    try
    {
        module = torch::jit::load("./resnet.pt");
    }
    catch (const c10::Error &e)
    {
        std::cerr << "error loading the model\n";
        return -1;
    }

    // create a vector of inputs
    std::vector<torch::jit::IValue> inputs;
    // parse the array in Fortran mem layout (reverse dimension order)
    auto input_tensor = torch::from_blob(input, {224, 224, 3, 1});

    // use GPU
    // inputs_tensor.to(at::kCUDA);
    // module.to(at::kCUDA);

    // permute the array mem layout from Fortran to C
    input_tensor = input_tensor.permute({3, 2, 1, 0});
    inputs.push_back(input_tensor);

    // Execute the model and turn its output into a tensor.
    at::Tensor output = module.forward(inputs).toTensor();
    std::cout << output.slice(/*dim=*/1, /*start=*/0, /*end=*/5) << '\n';

    std::cout << "ok\n";

    return 1;
}